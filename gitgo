#!/bin/sh

BIN_DIRECTORY="/usr/local/bin"
SCRIPT_DIRECTORY="$(realpath "$(dirname "$0")")"
SCRIPT_NAME=$(basename "$0")

reboot_message=$(
  cat <<EOF
\n\n
*******************************************************
///////////////////////////////////////////////////////
\nPlease restart your terminal to apply changes
                   OR
run the following to apply changes: $ \x1b[1m\033[92msource ~/.zshrc\033[0m
\n///////////////////////////////////////////////////////
*******************************************************
\n\n
EOF
)

help_message=$(
  cat <<EOF
  
*******************************************************
///////////////////////////////////////////////////////

$SCRIPT_NAME is a small set of functions to perform the following tasks in one command:
-- Add all changes to a commit
-- Commit those changes with a message
-- Open your GitHub repo for review or merging

All commands start with "$SCRIPT_NAME" followed by the following arguments:
-- No arguments will open your GitHub repo
-- \033[92m\"commit message\"\033[0m commits all changes with your message
-- \033[92mcommit message without quotes\033[0m commits all changes with your message, after confirmation
-- \033[92mconfig\033[0m shows the relevant gitgo config info
-- \033[92mcurrurl\033[0m shows the currently linked repo
-- \033[92mpath_setup\033[0m sets up your environment via env path
-- \033[92mbin_setup\033[0m sets up your environment by adding directly to /usr/local/bin/
-- \033[92muninstall\033[0m removes $SCRIPT_NAME from /usr/local/bin/

Fun fact -- you can rename this file from $SCRIPT_NAME to anything you\'d like and use that as the command instead of gitgo.

Hope this helps! Dont break anything 

///////////////////////////////////////////////////////
*******************************************************
EOF
)

gg_log() {
  printf "\x1b[1m\x1b[44m\033[92m$SCRIPT_NAME:\033[0m $1\n" >&2
}

config() {
  gg_log "Bin/script target directory:    $BIN_DIRECTORY"
  gg_log "Script source directory:        $SCRIPT_DIRECTORY"
  gg_log "Script current name:            $SCRIPT_NAME"
  url=$(get_github_url)
}

show_curr_url() {
  url=$(get_github_url)
}

show_help() {
  printf "$help_message"
}

path_setup() {
  chmod +x $SCRIPT_NAME
  if [[ ":$PATH:" != *":$SCRIPT_DIRECTORY:"* ]]; then
    echo 'export PATH="$PATH:'"$SCRIPT_DIRECTORY"'"' >>~/.zshrc
    gg_log "Your new Zsh shell config"
    gg_log "*******************************************************"
    gg_log ""
    file_path=~/.zshrc
    if [ -e "$file_path" ]; then
      while IFS= read -r line; do
        gg_log "$line"
      done <"$file_path"
    else
      echo "File not found: $file_path"
    fi
    gg_log ""
    gg_log "*******************************************************"
    gg_log "$reboot_message"
  else
    gg_log "$SCRIPT_DIRECTORY already exists in path. Nothing to do..."
  fi
}

bin_setup() {
  if [ -e "$BIN_DIRECTORY/$SCRIPT_NAME" ]; then
    gg_log "Already installed -- you can already use $SCRIPT_NAME from anywhere!"
  else
    sudo ln -s "$SCRIPT_DIRECTORY/$SCRIPT_NAME" $BIN_DIRECTORY
    gg_log "Successfully added to bin -- you can now use $SCRIPT_NAME from anywhere!"
    gg_log "\n$help_message"
  fi
}

uninstall() {

  if [ -e "$0" ] && [ "$0" != "./$SCRIPT_NAME" ]; then

    gg_log "\033[31mThis will delete the file at:"
    gg_log ""
    gg_log "\033[31m$SCRIPT_DIRECTORY/$SCRIPT_NAME"
    gg_log ""
    gg_log "\033[31mDo you wish to proceed?"
    gg_log ""
    gg_log "(Y/N):"
    read -p "" response

    response=$(echo "$response" | tr '[:lower:]' '[:upper:]')

    if [ "$response" == "Y" ]; then
      sudo rm $SCRIPT_DIRECTORY/$SCRIPT_NAME
      gg_log "Successfully uninstalled -- thanks for using $SCRIPT_NAME :)"
      gg_log "To reinstall run \033[92m ./$SCRIPT_NAME bin_setup"
      exit 1
    else
      gg_log "Uninstallation cancelled -- happy committing!"
      exit 1
    fi
  else
    gg_log "$SCRIPT_NAME not installed. To set up run ==> \033[92m ./$SCRIPT_NAME bin_setup"
    exit 1
  fi
}

go_go_power_ranger() {
  url=$(get_github_url)
  gg_log "this is the returned URL by $SCRIPT_NAME: $url"
  commit_msg=$@

  git add --all
  git commit --all -m"$commit_msg"
  git push origin HEAD

  open "$url"
}

get_branch() {
  current_branch=$(git branch --show-current)
  echo "$current_branch"
}

get_remote_origin_url() {
  local remote_url
  remote_url=$(git remote get-url origin)

  if [ -n "$remote_url" ]; then
    echo "$remote_url"
  else
    gg_log "Remote origin URL not found."
  fi
}

get_github_url() {
  is_inside_git_repository
  ssh_url=$(get_remote_origin_url)
  gg_log "Remote origin url:              $ssh_url"
  https_url=$(convert_ssh_to_https "$ssh_url")
  gg_log "Linked https redirection url:   $https_url"
  echo $https_url
}

convert_ssh_to_https() {
  local ssh_url="$1"
  https_url=$(echo "$ssh_url" | sed 's/^git@\(.*\):/https:\/\/\1\//')
  https_url_with_branch_no_dot_git=$(echo "$https_url" | sed 's/\.git$//')

  current_branch=$(git branch --show-current)
  https_url_with_branch="$https_url_with_branch_no_dot_git/tree/$current_branch"
  echo $https_url_with_branch
}

is_inside_git_repository() {
  if [ -n "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]; then
    gg_log "Inside git repo:                true"
  else
    gg_log "Git repo not found. Please create one with \"git init\""
    exit 0
  fi
}

if [ "$#" -eq 0 ]; then
  gg_log "Have fun!"
  url=$(get_github_url)
  open "$url"
elif [ "$#" -gt 1 ]; then

  args="$*"

  gg_log "Are you sure you want this to be your commit message?"
  gg_log ""
  gg_log "$args"
  gg_log ""
  gg_log "(Y/N):"
  read -p "" response

  response=$(echo "$response" | tr '[:lower:]' '[:upper:]')

  if [ "$response" == "Y" ]; then
    go_go_power_ranger $@
    exit 0
  else
    gg_log "Ok well then bruh that makes no sense... enter '$SCRIPT_NAME help' for more info"
    exit 1
  fi
elif [ "$1" == "currurl" ]; then
  show_curr_url
  exit 0
elif [ "$1" == "path_setup" ]; then
  path_setup
  exit 0
elif [ "$1" == "config" ]; then
  config
  exit 0
elif [ "$1" == "bin_setup" ]; then
  bin_setup
  exit 0
elif [ "$1" == "uninstall" ]; then
  uninstall
  exit 0
elif [ "$1" == "help" ]; then
  show_help
  exit 0
elif [ -n "$1" ]; then
  if [ "$#" -eq 1 ] && [[ ! "$1" =~ " " ]]; then

    gg_log "Are you sure you want this to be your commit message?"
    gg_log ""
    gg_log "$1"
    gg_log ""
    gg_log "(Y/N):"
    read -p "" response

    response=$(echo "$response" | tr '[:lower:]' '[:upper:]')

    if [ "$response" == "Y" ]; then
      go_go_power_ranger $@
      exit 0
    else
      gg_log "Ok well then bruh that makes no sense... enter '$SCRIPT_NAME help' for more info"
      exit 1
    fi
  else
    go_go_power_ranger $@
    exit 0
  fi
fi
